<?xml version="1.0" encoding="UTF-8"?><record_update table="scan_table_check">
    <scan_table_check action="INSERT_OR_UPDATE">
        <active>true</active>
        <advanced>false</advanced>
        <attributes/>
        <category>performance</category>
        <conditions table="sp_widget">client_scriptLIKE$rootScope.$on^client_scriptNOT LIKE$scope.$on('destroy'^ORclient_scriptNOT LIKE$scope.$on("destroy"^EQ<item endquery="false" field="client_script" goto="false" newquery="false" operator="LIKE" or="false" value="$rootScope.$on"/>
            <item endquery="false" field="client_script" goto="false" newquery="false" operator="NOT LIKE" or="false" value="$scope.$on('destroy'"/>
            <item endquery="false" field="client_script" goto="false" newquery="false" operator="NOT LIKE" or="true" value="$scope.$on(&quot;destroy&quot;"/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </conditions>
        <description>$rootScope.$on listeners will remain in memory if not properly cleaned up. This will create a memory leak if the controller falls out of scope.</description>
        <documentation_url/>
        <finding_type>scan_finding</finding_type>
        <name>Always deregister $rootScope.$on listeners on the scope $destory event</name>
        <priority>1</priority>
        <resolution_details>Follow the below code example to deregister-&#13;
&#13;
api.controller = function ($rootScope, $scope) {&#13;
  /* widget controller */&#13;
  var c = this;&#13;
&#13;
  var deregister = $rootScope.$on("someevent", function () {});&#13;
&#13;
  $scope.$on("$destroy", function destroyScope() {&#13;
    deregister();&#13;
  });&#13;
};&#13;
</resolution_details>
        <run_condition/>
        <score_max>100</score_max>
        <score_min>0</score_min>
        <score_scale>1</score_scale>
        <script><![CDATA[(function (engine) {

    // Add your code here

})(engine);]]></script>
        <short_description>Always deregister $rootScope.$on listeners on the scope $destory event</short_description>
        <sys_class_name>scan_table_check</sys_class_name>
        <sys_created_by>EGMCF</sys_created_by>
        <sys_created_on>2023-03-07 21:32:54</sys_created_on>
        <sys_id>b3f6473387d52d107bd12fce8bbb358f</sys_id>
        <sys_mod_count>3</sys_mod_count>
        <sys_name>Always deregister $rootScope.$on listeners on the scope $destory event</sys_name>
        <sys_package display_value="Global" source="global">global</sys_package>
        <sys_policy/>
        <sys_scope display_value="BayerInstanceScanChecks">69a9da4e874042507bd12fce8bbb35df</sys_scope>
        <sys_update_name>scan_table_check_b3f6473387d52d107bd12fce8bbb358f</sys_update_name>
        <sys_updated_by>EGMCF</sys_updated_by>
        <sys_updated_on>2024-01-31 20:50:27</sys_updated_on>
        <table>sp_widget</table>
        <use_manifest>false</use_manifest>
    </scan_table_check>
    <sys_claim action="INSERT_OR_UPDATE">
        <claim_owner_scope display_value="BayerInstanceScanChecks">69a9da4e874042507bd12fce8bbb35df</claim_owner_scope>
        <claim_timestamp>18d614990720000001</claim_timestamp>
        <metadata_update_name>scan_table_check_b3f6473387d52d107bd12fce8bbb358f</metadata_update_name>
        <previous_claim_app_version>1.0.0</previous_claim_app_version>
        <previous_claim_name>BayerInstanceScanChecks</previous_claim_name>
        <previous_claim_scope>69a9da4e874042507bd12fce8bbb35df</previous_claim_scope>
        <sys_created_by>EGMCF</sys_created_by>
        <sys_created_on>2024-01-31 20:50:27</sys_created_on>
        <sys_id>f67ad2ce874042507bd12fce8bbb3556</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>EGMCF</sys_updated_by>
        <sys_updated_on>2024-01-31 20:50:27</sys_updated_on>
    </sys_claim>
</record_update>
