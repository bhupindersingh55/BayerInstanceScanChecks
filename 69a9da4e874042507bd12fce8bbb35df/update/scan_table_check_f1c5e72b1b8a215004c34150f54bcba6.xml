<?xml version="1.0" encoding="UTF-8"?><record_update table="scan_table_check">
    <scan_table_check action="INSERT_OR_UPDATE">
        <active>true</active>
        <advanced>true</advanced>
        <attributes/>
        <category>security</category>
        <conditions table="sys_script_include">active=true^client_callable=true^EQ<item endquery="false" field="active" goto="false" newquery="false" operator="=" or="false" value="true"/>
            <item endquery="false" field="client_callable" goto="false" newquery="false" operator="=" or="false" value="true"/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </conditions>
        <description>Rules for access control lists (ACLs) restrict access to data by requiring users to pass a set of requirements before they can interact with it, all client callable script includes should be secured with required roles.</description>
        <documentation_url>/api/now/v1/context_doc_url/CSHelp:Access_Controls</documentation_url>
        <finding_type>scan_finding</finding_type>
        <name>Access Controls on Client callable Script Includes</name>
        <priority>2</priority>
        <resolution_details>Any logged-in users with minimum snc_internal can access an unprotected CCSI by default. Attacker can run a GlideAjax on console or do a custom HTTP request xmlhttp.do and can execute functions defined in Client callable script include. Create ACL around script include with Type as "client_callable_script_include" and define required roles.</resolution_details>
        <run_condition/>
        <score_max>100</score_max>
        <score_min>0</score_min>
        <score_scale>1</score_scale>
        <script><![CDATA[(function (finding, current) {

    var gr_acl = new GlideRecord('sys_security_acl');
		gr_acl.addQuery('type','client_callable_script_include');
		gr_acl.addQuery('name','CONTAINS',current.name);
		gr_acl.query();
		if(!gr_acl.next()){
			finding.setCurrentSource(current);
			finding.increment();
		}
	

})(finding, current);]]></script>
        <short_description>Create Access Controls on Client callable Script Includes</short_description>
        <sys_class_name>scan_table_check</sys_class_name>
        <sys_created_by>EGMCF</sys_created_by>
        <sys_created_on>2023-04-13 11:53:36</sys_created_on>
        <sys_id>f1c5e72b1b8a215004c34150f54bcba6</sys_id>
        <sys_mod_count>3</sys_mod_count>
        <sys_name>Access Controls on Client callable Script Includes</sys_name>
        <sys_package display_value="Global" source="global">global</sys_package>
        <sys_policy/>
        <sys_scope display_value="BayerInstanceScanChecks">69a9da4e874042507bd12fce8bbb35df</sys_scope>
        <sys_update_name>scan_table_check_f1c5e72b1b8a215004c34150f54bcba6</sys_update_name>
        <sys_updated_by>EGMCF</sys_updated_by>
        <sys_updated_on>2024-01-31 20:50:28</sys_updated_on>
        <table>sys_script_include</table>
        <use_manifest>false</use_manifest>
    </scan_table_check>
    <sys_claim action="INSERT_OR_UPDATE">
        <claim_owner_scope display_value="BayerInstanceScanChecks">69a9da4e874042507bd12fce8bbb35df</claim_owner_scope>
        <claim_timestamp>18d6149956e0000001</claim_timestamp>
        <metadata_update_name>scan_table_check_f1c5e72b1b8a215004c34150f54bcba6</metadata_update_name>
        <previous_claim_app_version>1.0.0</previous_claim_app_version>
        <previous_claim_name>BayerInstanceScanChecks</previous_claim_name>
        <previous_claim_scope>69a9da4e874042507bd12fce8bbb35df</previous_claim_scope>
        <sys_created_by>EGMCF</sys_created_by>
        <sys_created_on>2024-01-31 20:50:28</sys_created_on>
        <sys_id>cf7ad2ce874042507bd12fce8bbb35a3</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>EGMCF</sys_updated_by>
        <sys_updated_on>2024-01-31 20:50:28</sys_updated_on>
    </sys_claim>
</record_update>
