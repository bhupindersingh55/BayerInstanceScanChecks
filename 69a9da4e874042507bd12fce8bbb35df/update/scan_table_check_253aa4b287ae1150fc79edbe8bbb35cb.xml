<?xml version="1.0" encoding="UTF-8"?><record_update table="scan_table_check">
    <scan_table_check action="INSERT_OR_UPDATE">
        <active>true</active>
        <advanced>true</advanced>
        <attributes/>
        <category>security</category>
        <conditions table="sys_db_object">nameNOT LIKEimport^EQ<item endquery="false" field="name" goto="false" newquery="false" operator="NOT LIKE" or="false" value="import"/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </conditions>
        <description>Every table should be secured by ACLs</description>
        <documentation_url>http://docs.servicenow.com/csh?topicname=acl-rule-types.html</documentation_url>
        <finding_type>scan_finding</finding_type>
        <name>Tables without ACLs</name>
        <priority>2</priority>
        <resolution_details>For tables that have no ACLs defined, the default deny property can be used to make the wildcard table ACL rules restrict the read, write, create, and delete operations on all tables unless the user has the admin role or meets the requirements of another table ACL rule. This means that custom tables without ACLs will not be accessible by any other user beside admin.</resolution_details>
        <run_condition/>
        <score_max>100</score_max>
        <score_min>0</score_min>
        <score_scale>1</score_scale>
        <script><![CDATA[(function(engine) {

    // Find any ACL Record for the current able..
    var gr_acl = new GlideRecord('sys_security_acl');
    gr_acl.addQuery('name', 'STARTSWITH', engine.current.getValue('name'));
    gr_acl.addActiveQuery();
    gr_acl.setLimit(1); // one record is enough
    gr_acl.query();

    // no ACL record found, raise finding
    if (!gr_acl.hasNext()) {
        engine.finding.increment();
    }


})(engine);]]></script>
        <short_description>Tables without ACLs</short_description>
        <sys_class_name>scan_table_check</sys_class_name>
        <sys_created_by>GIYYH</sys_created_by>
        <sys_created_on>2022-10-18 14:38:55</sys_created_on>
        <sys_id>253aa4b287ae1150fc79edbe8bbb35cb</sys_id>
        <sys_mod_count>6</sys_mod_count>
        <sys_name>Tables without ACLs</sys_name>
        <sys_package display_value="Global" source="global">global</sys_package>
        <sys_policy/>
        <sys_scope display_value="BayerInstanceScanChecks">69a9da4e874042507bd12fce8bbb35df</sys_scope>
        <sys_update_name>scan_table_check_253aa4b287ae1150fc79edbe8bbb35cb</sys_update_name>
        <sys_updated_by>EGMCF</sys_updated_by>
        <sys_updated_on>2024-01-31 20:50:24</sys_updated_on>
        <table>sys_db_object</table>
        <use_manifest>false</use_manifest>
    </scan_table_check>
    <sys_claim action="INSERT_OR_UPDATE">
        <claim_owner_scope display_value="BayerInstanceScanChecks">69a9da4e874042507bd12fce8bbb35df</claim_owner_scope>
        <claim_timestamp>18d614984ce0000001</claim_timestamp>
        <metadata_update_name>scan_table_check_253aa4b287ae1150fc79edbe8bbb35cb</metadata_update_name>
        <previous_claim_app_version>1.0.0</previous_claim_app_version>
        <previous_claim_name>BayerInstanceScanChecks</previous_claim_name>
        <previous_claim_scope>69a9da4e874042507bd12fce8bbb35df</previous_claim_scope>
        <sys_created_by>EGMCF</sys_created_by>
        <sys_created_on>2024-01-31 20:50:24</sys_created_on>
        <sys_id>8e7a92ce874042507bd12fce8bbb359b</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>EGMCF</sys_updated_by>
        <sys_updated_on>2024-01-31 20:50:24</sys_updated_on>
    </sys_claim>
</record_update>
