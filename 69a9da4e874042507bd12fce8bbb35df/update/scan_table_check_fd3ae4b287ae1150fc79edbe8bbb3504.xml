<?xml version="1.0" encoding="UTF-8"?><record_update table="scan_table_check">
    <scan_table_check action="INSERT_OR_UPDATE">
        <active>true</active>
        <advanced>false</advanced>
        <attributes/>
        <category>performance</category>
        <conditions table="sys_script">active=true^scriptLIKEcurrent.update()^EQ<item endquery="false" field="active" goto="false" newquery="false" operator="=" or="false" value="true"/>
            <item endquery="false" field="script" goto="false" newquery="false" operator="LIKE" or="false" value="current.update()"/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </conditions>
        <description>In a "before" Business Rule, an update of the current record should not be necessary as the record will be saved upon completion of the highest ordered Business Rule.  Furthermore, in certain cases, the save may need to be stopped in the chain of Before business rules (with use of the setAbortAction function), and if the record has already been updated, data may have already been saved which would normally be an invalid save by the logic of the Business Rule.

In an "after" Business Rule current.update() should also not be used.  Any action that might be performed in an After Business Rule can usually have been added in a high ordered Before Business Rule, eliminating any need for an explicit update() function call.  In addition, updating in an After Business Rule will cause all Before Business Rules to run again, which, as mentioned previously could cause performance processing issues.

For more information, go through the support documentation URL provided 

https://docs.servicenow.com/bundle/rome-application-development/page/script/business-rules/reference/r_HowBusinessRulesWork.html#d2794255e260
https://support.servicenow.com/kb?id=kb_article_view&amp;sysparm_article=KB0722983</description>
        <documentation_url>https://support.servicenow.com/kb?id=kb_article_view&amp;sysparm_article=KB0715782</documentation_url>
        <finding_type>scan_finding</finding_type>
        <name>Business rules should not use current.update()</name>
        <priority>2</priority>
        <resolution_details>Remove unnecessary current.update() from a business rule. In case you need to update data on the current record, move the logic to a before business rule without using current.update()

In certain exception cases, if you need to use current.update() eg in onAfter scripts, use it along with the setWorkflow() so it dont remain in an infinte loop.</resolution_details>
        <run_condition/>
        <score_max>100</score_max>
        <score_min>0</score_min>
        <score_scale>1</score_scale>
        <script><![CDATA[(function (engine) {

    // Add your code here

})(engine);]]></script>
        <short_description>Business rules should not use current.update()</short_description>
        <sys_class_name>scan_table_check</sys_class_name>
        <sys_created_by>GIYYH</sys_created_by>
        <sys_created_on>2022-10-18 14:38:55</sys_created_on>
        <sys_id>fd3ae4b287ae1150fc79edbe8bbb3504</sys_id>
        <sys_mod_count>6</sys_mod_count>
        <sys_name>Business rules should not use current.update()</sys_name>
        <sys_package display_value="Global" source="global">global</sys_package>
        <sys_policy/>
        <sys_scope display_value="BayerInstanceScanChecks">69a9da4e874042507bd12fce8bbb35df</sys_scope>
        <sys_update_name>scan_table_check_fd3ae4b287ae1150fc79edbe8bbb3504</sys_update_name>
        <sys_updated_by>EGMCF</sys_updated_by>
        <sys_updated_on>2024-01-31 20:50:27</sys_updated_on>
        <table>sys_script</table>
        <use_manifest>false</use_manifest>
    </scan_table_check>
    <sys_claim action="INSERT_OR_UPDATE">
        <claim_owner_scope display_value="BayerInstanceScanChecks">69a9da4e874042507bd12fce8bbb35df</claim_owner_scope>
        <claim_timestamp>18d61498f850000001</claim_timestamp>
        <metadata_update_name>scan_table_check_fd3ae4b287ae1150fc79edbe8bbb3504</metadata_update_name>
        <previous_claim_app_version>1.0.0</previous_claim_app_version>
        <previous_claim_name>BayerInstanceScanChecks</previous_claim_name>
        <previous_claim_scope>69a9da4e874042507bd12fce8bbb35df</previous_claim_scope>
        <sys_created_by>EGMCF</sys_created_by>
        <sys_created_on>2024-01-31 20:50:27</sys_created_on>
        <sys_id>667ad2ce874042507bd12fce8bbb3546</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>EGMCF</sys_updated_by>
        <sys_updated_on>2024-01-31 20:50:27</sys_updated_on>
    </sys_claim>
</record_update>
