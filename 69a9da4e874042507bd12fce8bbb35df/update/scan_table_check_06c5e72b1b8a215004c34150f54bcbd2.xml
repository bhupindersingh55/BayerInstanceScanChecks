<?xml version="1.0" encoding="UTF-8"?><record_update table="scan_table_check">
    <scan_table_check action="INSERT_OR_UPDATE">
        <active>true</active>
        <advanced>false</advanced>
        <attributes/>
        <category>user_experience</category>
        <conditions table="sys_properties">name=glide.import_set_row.dynamically_add_fields^value=true^EQ<item endquery="false" field="name" goto="false" newquery="false" operator="=" or="false" value="glide.import_set_row.dynamically_add_fields"/>
            <item endquery="false" field="value" goto="false" newquery="false" operator="=" or="false" value="true"/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </conditions>
        <description>Instances that contain large numbers of import sets can sometimes become unresponsive when an import adds a column because the instance must alter every row in the staging table. In some cases, the database alter table action causes an outage.</description>
        <documentation_url>https://docs.servicenow.com/bundle/orlando-platform-administration/page/administer/import-sets/reference/r_ImportSetsProperties.html</documentation_url>
        <finding_type>scan_finding</finding_type>
        <name>ImportSetRow Field Addition check</name>
        <priority>3</priority>
        <resolution_details>It is recommended  to set this property to false to prevent an import set from adding columns to the staging table and cause performance issues.  As a workaround, administrators can manually add a column to the staging table by creating a new dictionary entry and then reimporting the import set.&#13;
&#13;
Property name: glide.import_set_row.dynamically_add_fields&#13;
Type: true | false&#13;
Default value: true</resolution_details>
        <run_condition/>
        <score_max>100</score_max>
        <score_min>0</score_min>
        <score_scale>1</score_scale>
        <script><![CDATA[(function (finding, current) {

    // Add your code here

})(finding, current);]]></script>
        <short_description>Avoid adding columns to ImportSetRow staging table at runtime</short_description>
        <sys_class_name>scan_table_check</sys_class_name>
        <sys_created_by>EGMCF</sys_created_by>
        <sys_created_on>2023-04-13 11:53:36</sys_created_on>
        <sys_id>06c5e72b1b8a215004c34150f54bcbd2</sys_id>
        <sys_mod_count>3</sys_mod_count>
        <sys_name>ImportSetRow Field Addition check</sys_name>
        <sys_package display_value="Global" source="global">global</sys_package>
        <sys_policy/>
        <sys_scope display_value="BayerInstanceScanChecks">69a9da4e874042507bd12fce8bbb35df</sys_scope>
        <sys_update_name>scan_table_check_06c5e72b1b8a215004c34150f54bcbd2</sys_update_name>
        <sys_updated_by>EGMCF</sys_updated_by>
        <sys_updated_on>2024-01-31 20:50:31</sys_updated_on>
        <table>sys_properties</table>
        <use_manifest>false</use_manifest>
    </scan_table_check>
    <sys_claim action="INSERT_OR_UPDATE">
        <claim_owner_scope display_value="BayerInstanceScanChecks">69a9da4e874042507bd12fce8bbb35df</claim_owner_scope>
        <claim_timestamp>18d61499f8e0000001</claim_timestamp>
        <metadata_update_name>scan_table_check_06c5e72b1b8a215004c34150f54bcbd2</metadata_update_name>
        <previous_claim_app_version>1.0.0</previous_claim_app_version>
        <previous_claim_name>BayerInstanceScanChecks</previous_claim_name>
        <previous_claim_scope>69a9da4e874042507bd12fce8bbb35df</previous_claim_scope>
        <sys_created_by>EGMCF</sys_created_by>
        <sys_created_on>2024-01-31 20:50:31</sys_created_on>
        <sys_id>237a16ce874042507bd12fce8bbb3550</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>EGMCF</sys_updated_by>
        <sys_updated_on>2024-01-31 20:50:31</sys_updated_on>
    </sys_claim>
</record_update>
