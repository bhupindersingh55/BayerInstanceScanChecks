<?xml version="1.0" encoding="UTF-8"?><record_update table="scan_linter_check">
    <scan_linter_check action="INSERT_OR_UPDATE">
        <active>true</active>
        <attributes/>
        <category>performance</category>
        <description>Storing an object reference in an array when only primitive data type is needed could cause performance impact. </description>
        <documentation_url>https://www.servicenow.com/community/developer-articles/performance-best-practices-for-server-side-coding-in-servicenow/ta-p/2324426#numberSix</documentation_url>
        <finding_type>scan_finding</finding_type>
        <name>Avoid running out of memory due to storing dot-walked GlideElement fields</name>
        <priority>2</priority>
        <resolution_details>Issue:  &#13;
&#13;
For example, the following code stores a GlideElement object when only a simple String type is needed. &#13;
**************************************&#13;
var arrIncident = [];&#13;
var myIncident = new GlideRecord("incident");&#13;
myIncident.query();&#13;
while(myIncident._next()) {&#13;
        arrIncident.push(myIncident.caller_id); // This is passing a GlideElement&#13;
}&#13;
**************************************&#13;
&#13;
Resolution: &#13;
&#13;
A GlideElement object type is actually a Java datatype that has been exposed to Javascript through the GlideRecord API. GlideElement is many times larger than a simple 32 character String sys_id - it is in the range of 10's of kilobytes for each. By contrast, ServiceNow Javascript stores Strings as UTF-16, so a good estimate for size of a string would be the total character length x 2 bytes. Since each sys_id has 32 characters in it, the storage size would be a meager 64 bytes.&#13;
&#13;
Using the GlideRecord.getValue(String) method is a good way to avoid using complex data types since it will return the simple Javascript String values instead of complex Java objects.&#13;
&#13;
var arrIncident = [];&#13;
var myIncident = new GlideRecord("incident");&#13;
myIncident.query();&#13;
while(myIncident._next()) {&#13;
   if (!myIncident.caller_id.nil())&#13;
      arrIncident.push(myIncident.getValue("caller_id")); // This passes just the sys_id as a String. Much better!&#13;
OR&#13;
       arrIncident.push(myIncident.caller_id+''); // This is Implicit conversion&#13;
}&#13;
</resolution_details>
        <run_condition/>
        <score_max>100</score_max>
        <score_min>0</score_min>
        <score_scale>1</score_scale>
        <script><![CDATA[(function(engine) {

    engine.rootNode.visit(function(node) {
         if (node.getTypeName() === "CALL") {
            node.visit(function(childnode) {
                if (childnode.getTypeName() === 'NAME' && childnode.getNameIdentifier() === 'push' && childnode.getParent().getTypeName() === 'GETPROP') {
                    var method_found = false;
                    childnode.getParent().getParent().visit(function(subnode) {
                        if (subnode.getTypeName() === 'NAME' && subnode.getNameIdentifier() === 'getValue') {
                            method_found = true;
                        }
                        if (subnode.getTypeName() === 'STRING' && subnode.getParent().getTypeName() === 'ADD') {
                            method_found = true;
                        }
                    });
                    if (!method_found) {
                        engine.finding.incrementWithNode(node);
                    }
                }
            });
        }
    });

})(engine);]]></script>
        <short_description>Avoid running out of memory due to storing dot-walked GlideElement fields</short_description>
        <sys_class_name>scan_linter_check</sys_class_name>
        <sys_created_by>EGMCF</sys_created_by>
        <sys_created_on>2023-03-01 22:42:45</sys_created_on>
        <sys_id>4d2d540687dd6dd07bd12fce8bbb35b7</sys_id>
        <sys_mod_count>38</sys_mod_count>
        <sys_name>Avoid running out of memory due to storing dot-walked GlideElement fields</sys_name>
        <sys_package display_value="Global" source="global">global</sys_package>
        <sys_policy/>
        <sys_scope display_value="BayerInstanceScanChecks">69a9da4e874042507bd12fce8bbb35df</sys_scope>
        <sys_update_name>scan_linter_check_4d2d540687dd6dd07bd12fce8bbb35b7</sys_update_name>
        <sys_updated_by>EGMCF</sys_updated_by>
        <sys_updated_on>2024-01-31 20:50:26</sys_updated_on>
    </scan_linter_check>
    <sys_claim action="INSERT_OR_UPDATE">
        <claim_owner_scope display_value="BayerInstanceScanChecks">69a9da4e874042507bd12fce8bbb35df</claim_owner_scope>
        <claim_timestamp>18d61498d470000001</claim_timestamp>
        <metadata_update_name>scan_linter_check_4d2d540687dd6dd07bd12fce8bbb35b7</metadata_update_name>
        <previous_claim_app_version>1.0.0</previous_claim_app_version>
        <previous_claim_name>BayerInstanceScanChecks</previous_claim_name>
        <previous_claim_scope>69a9da4e874042507bd12fce8bbb35df</previous_claim_scope>
        <sys_created_by>EGMCF</sys_created_by>
        <sys_created_on>2024-01-31 20:50:26</sys_created_on>
        <sys_id>e27ad2ce874042507bd12fce8bbb3525</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>EGMCF</sys_updated_by>
        <sys_updated_on>2024-01-31 20:50:26</sys_updated_on>
    </sys_claim>
</record_update>
