<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>global.BayerInstanceScanUtilClient</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description>This script include holds client calls w.r.t Bayer Development Best Practices</description>
        <name>BayerInstanceScanUtilClient</name>
        <script><![CDATA[var BayerInstanceScanUtilClient = Class.create();
BayerInstanceScanUtilClient.prototype = Object.extendsObject(AbstractAjaxProcessor, {

    getScanResults: function() {
        var scanAttributes = [];
        var searchByTable = '';
        var searchByCategory = '';
        var searchByPriority = '';
        var scanCategory = this.getParameter('sysparm_scanCategory');
        var suiteID = gs.getProperty('instance_scan.update_set.suite');
        var suiteChecks = new GlideRecord('scan_check_suite_check');
        suiteChecks.addQuery('suite', suiteID);
        if (scanCategory.startsWith('primary')) {
            if (scanCategory.split('_')[1] == 'scripting') {
                suiteChecks.addEncodedQuery('check.sys_class_name=scan_column_type_check^ORcheck.sys_class_name=scan_linter_check');
            } else if (scanCategory.split('_')[1] == 'table') {
                suiteChecks.addEncodedQuery('check.sys_class_name=scan_table_check');
            }
        } else if (scanCategory.startsWith('sub')) {
            searchByTable = scanCategory.replace('sub_', '');
            suiteChecks.addEncodedQuery('check.ref_scan_table_check.table=' + searchByTable);
        } else if (scanCategory.startsWith('categories')) {
            searchByCategory = scanCategory.replace('categories_', '');
            if (searchByCategory != 'all')
                suiteChecks.addQuery('check.category', searchByCategory);
        } else if (scanCategory.startsWith('priorties')) {
            searchByPriority = scanCategory.replace('priorties_', '');
            suiteChecks.addQuery('check.priority', searchByPriority);
        }
        suiteChecks.addQuery('check.active', true);
        suiteChecks.query();
        while (suiteChecks.next()) {
            scanAttributes.push({
                "scanSysID": suiteChecks.check.sys_id + "",
                "scanName": suiteChecks.check.name + "",
                "scanTitle": suiteChecks.check.short_description + "",
                "scanDescription": suiteChecks.check.description + "",
                "scanResolution": suiteChecks.check.resolution_details + "",
                "scanURL": suiteChecks.check.documentation_url + ""
            });
        }
        return JSON.stringify(scanAttributes);
    },

    type: 'BayerInstanceScanUtilClient'
});


//     getScanResults: function() {
//         var scanAttributes = [];
//         var scanCategory = this.getParameter('sysparm_scanCategory');
//         var suiteID = gs.getProperty('instance_scan.update_set.suite');
//         var suiteChecks = new GlideRecord('scan_check_suite_check');
//         suiteChecks.addQuery('suite', suiteID);
// 		if (scanCategory != 'all')
//         suiteChecks.addQuery('check.category', scanCategory);
//         suiteChecks.addQuery('check.active', true);
//         suiteChecks.query();
//         while (suiteChecks.next()) {
//             scanAttributes.push({
//                 "scanSysID": suiteChecks.check.sys_id+"",
// 				"scanName": suiteChecks.check.name+"",
// 				"scanTitle": suiteChecks.check.short_description+"",
//                 "scanDescription": suiteChecks.check.description+"",
//                 "scanResolution": suiteChecks.check.resolution_details+"",
// 				"scanURL": suiteChecks.check.documentation_url+""
//             });
//         }
//         return JSON.stringify(scanAttributes);
//     },]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>EGMCF</sys_created_by>
        <sys_created_on>2023-03-24 17:09:54</sys_created_on>
        <sys_id>41bda9551bf5251004c34150f54bcb51</sys_id>
        <sys_mod_count>38</sys_mod_count>
        <sys_name>BayerInstanceScanUtilClient</sys_name>
        <sys_package display_value="Global" source="global">global</sys_package>
        <sys_policy/>
        <sys_scope display_value="BayerInstanceScanChecks">69a9da4e874042507bd12fce8bbb35df</sys_scope>
        <sys_update_name>sys_script_include_41bda9551bf5251004c34150f54bcb51</sys_update_name>
        <sys_updated_by>EGMCF</sys_updated_by>
        <sys_updated_on>2024-01-31 20:50:33</sys_updated_on>
    </sys_script_include>
    <sys_claim action="INSERT_OR_UPDATE">
        <claim_owner_scope display_value="BayerInstanceScanChecks">69a9da4e874042507bd12fce8bbb35df</claim_owner_scope>
        <claim_timestamp>18d6149a7c20000001</claim_timestamp>
        <metadata_update_name>sys_script_include_41bda9551bf5251004c34150f54bcb51</metadata_update_name>
        <previous_claim_app_version>1.0.0</previous_claim_app_version>
        <previous_claim_name>BayerInstanceScanChecks</previous_claim_name>
        <previous_claim_scope>69a9da4e874042507bd12fce8bbb35df</previous_claim_scope>
        <sys_created_by>EGMCF</sys_created_by>
        <sys_created_on>2024-01-31 20:50:33</sys_created_on>
        <sys_id>448a16ce874042507bd12fce8bbb35c5</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>EGMCF</sys_updated_by>
        <sys_updated_on>2024-01-31 20:50:33</sys_updated_on>
    </sys_claim>
</record_update>
